using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class BrushStrokeModel {
    [RealtimeProperty(1, true)]
    private RealtimeArray<RibbonPointModel> _ribbonPoints;

    [RealtimeProperty(2, false)]
    private Vector3 _brushTipPosition;

    [RealtimeProperty(3, false)]
    private Quaternion _brushTipRotation;

    [RealtimeProperty(4, true)]
    private bool _brushStrokeFinalized;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class BrushStrokeModel : RealtimeModel {
    public UnityEngine.Vector3 brushTipPosition {
        get {
            return _brushTipPosition;
        }
        set {
            if (_brushTipPosition == value) return;
            _brushTipPositionShouldWrite = true;
            _brushTipPosition = value;
            InvalidateUnreliableLength();
        }
    }
    
    public UnityEngine.Quaternion brushTipRotation {
        get {
            return _brushTipRotation;
        }
        set {
            if (_brushTipRotation == value) return;
            _brushTipRotationShouldWrite = true;
            _brushTipRotation = value;
            InvalidateUnreliableLength();
        }
    }
    
    public bool brushStrokeFinalized {
        get {
            return _cache.LookForValueInCache(_brushStrokeFinalized, entry => entry.brushStrokeFinalizedSet, entry => entry.brushStrokeFinalized);
        }
        set {
            if (this.brushStrokeFinalized == value) return;
            _cache.UpdateLocalCache(entry => { entry.brushStrokeFinalizedSet = true; entry.brushStrokeFinalized = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    public Normal.Realtime.Serialization.RealtimeArray<RibbonPointModel> ribbonPoints {
        get { return _ribbonPoints; }
    }
    
    private struct LocalCacheEntry {
        public bool brushStrokeFinalizedSet;
        public bool brushStrokeFinalized;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    private bool _brushTipPositionShouldWrite;
    private bool _brushTipRotationShouldWrite;
    
    public enum PropertyID : uint {
        RibbonPoints = 1,
        BrushTipPosition = 2,
        BrushTipRotation = 3,
        BrushStrokeFinalized = 4,
    }
    
    public BrushStrokeModel() : this(null) {
    }
    
    public BrushStrokeModel(RealtimeModel parent) : base(null, parent) {
        RealtimeModel[] childModels = new RealtimeModel[1];
        
        _ribbonPoints = new Normal.Realtime.Serialization.RealtimeArray<RibbonPointModel>();
        childModels[0] = _ribbonPoints;
        
        SetChildren(childModels);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteBytesLength((uint)PropertyID.BrushTipPosition, WriteStream.Vector3ToBytesLength());
            length += WriteStream.WriteBytesLength((uint)PropertyID.BrushTipRotation, WriteStream.QuaternionToBytesLength());
            length += WriteStream.WriteVarint32Length((uint)PropertyID.BrushStrokeFinalized, _brushStrokeFinalized ? 1u : 0u);
        } else if (context.unreliableChannel) {
            if (_brushTipPositionShouldWrite) {
                length += WriteStream.WriteBytesLength((uint)PropertyID.BrushTipPosition, WriteStream.Vector3ToBytesLength());
            }
            if (_brushTipRotationShouldWrite) {
                length += WriteStream.WriteBytesLength((uint)PropertyID.BrushTipRotation, WriteStream.QuaternionToBytesLength());
            }
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.brushStrokeFinalizedSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.BrushStrokeFinalized, entry.brushStrokeFinalized ? 1u : 0u);
            }
        }
        length += WriteStream.WriteCollectionLength((uint)PropertyID.RibbonPoints, _ribbonPoints, context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteBytes((uint)PropertyID.BrushTipPosition, WriteStream.Vector3ToBytes(_brushTipPosition));
            _brushTipPositionShouldWrite = false;
            stream.WriteBytes((uint)PropertyID.BrushTipRotation, WriteStream.QuaternionToBytes(_brushTipRotation));
            _brushTipRotationShouldWrite = false;
            stream.WriteVarint32((uint)PropertyID.BrushStrokeFinalized, _brushStrokeFinalized ? 1u : 0u);
        } else if (context.unreliableChannel) {
            if (_brushTipPositionShouldWrite) {
                _brushTipPositionShouldWrite = false;
                stream.WriteBytes((uint)PropertyID.BrushTipPosition, WriteStream.Vector3ToBytes(_brushTipPosition));
                didWriteProperties = true;
            }
            if (_brushTipRotationShouldWrite) {
                _brushTipRotationShouldWrite = false;
                stream.WriteBytes((uint)PropertyID.BrushTipRotation, WriteStream.QuaternionToBytes(_brushTipRotation));
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateUnreliableLength();
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.brushStrokeFinalizedSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.brushStrokeFinalizedSet) {
                stream.WriteVarint32((uint)PropertyID.BrushStrokeFinalized, entry.brushStrokeFinalized ? 1u : 0u);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
        stream.WriteCollection((uint)PropertyID.RibbonPoints, _ribbonPoints, context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.RibbonPoints: {
                    stream.ReadCollection(_ribbonPoints, context);
                    break;
                }
                case (uint)PropertyID.BrushTipPosition: {
                    _brushTipPosition = ReadStream.Vector3FromBytes(stream.ReadBytes());
                    _brushTipPositionShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.BrushTipRotation: {
                    _brushTipRotation = ReadStream.QuaternionFromBytes(stream.ReadBytes());
                    _brushTipRotationShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.BrushStrokeFinalized: {
                    _brushStrokeFinalized = (stream.ReadVarint32() != 0);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _brushStrokeFinalized = brushStrokeFinalized;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
